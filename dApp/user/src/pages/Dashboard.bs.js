// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "decco/src/Decco.bs.js";
import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Ethers$FlowsUserApp from "../lib/Ethers/Ethers.bs.js";
import * as Heading$FlowsUserApp from "../components/Heading.bs.js";
import * as StreamsTable$FlowsUserApp from "../components/StreamsTable.bs.js";
import * as PaymentHistoryTable$FlowsUserApp from "../components/PaymentHistoryTable.bs.js";

function makeBackupRequest_encode(v) {
  return Js_dict.fromArray([
              [
                "opts",
                Decco.arrayToJson(Decco.stringToJson, v.opts)
              ],
              [
                "clean_output",
                Decco.boolToJson(v.clean_output)
              ]
            ]);
}

function backupData(param) {
  var requestString = "http://localhost:8080/v1alpha1/pg_dump";
  console.log("request string: ", requestString);
  fetch(requestString, Fetch.RequestInit.make(/* Post */2, [
                  [
                    "content-type",
                    "application/json"
                  ],
                  [
                    "x-hasura-admin-secret",
                    "testing"
                  ]
                ], Caml_option.some(JSON.stringify(makeBackupRequest_encode({
                              opts: [
                                "-O",
                                "-x",
                                "-f",
                                "backup.sql",
                                "--schema",
                                "public",
                                "--schema",
                                "auth",
                                "--inserts"
                              ],
                              clean_output: true
                            }))), undefined, undefined, undefined, /* Include */2, undefined, undefined, undefined, undefined, undefined)(undefined)).then(function (prim) {
          return prim.json();
        }).then(function (json) {
        console.log("THE RESULT:", json);
        if (JSON.stringify(json).includes("errors") === false) {
          console.log("SUCCESS");
        } else {
          console.log("ERROR");
        }
        
      });
  
}

function Dashboard(Props) {
  return React.createElement("div", {
              className: "container max-w-3xl mx-auto"
            }, React.createElement("div", {
                  className: "border-gray-500 border-2 rounded-lg"
                }, React.createElement("div", {
                      className: "mt-2 -mb-1"
                    }, React.createElement(Heading$FlowsUserApp.make, {
                          children: "Raiden Node"
                        })), React.createElement("div", {
                      className: "text-center text-sm text-gray-500"
                    }, "0x2D5ED5dc97adC88bBDf69814B90F64a4C5495D81"), React.createElement("div", {
                      className: "m-1 grid grid-cols-1 gap-4 md:grid-cols-1"
                    }, React.createElement("div", {
                          className: "text-center"
                        }, React.createElement("button", {
                              className: "mt-3 w-full inline-flex justify-center border-b-2 border border-black shadow-sm px-6 py-2 bg-white text-base font-large text-black hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-2xl rounded",
                              onClick: (function (param) {
                                  console.log("test ", Ethers$FlowsUserApp.Utils.parseEtherUnsafe("0.1").toString());
                                  
                                })
                            }, "Deposit"), React.createElement("button", {
                              className: "mt-3 w-full inline-flex justify-center border-b-2 border border-black shadow-sm px-4 py-2 bg-white text-base font-large text-black hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-2 sm:w-auto sm:text-2xl rounded",
                              onClick: (function (param) {
                                  console.log("Withdraw");
                                  
                                })
                            }, "Withdraw"), React.createElement("button", {
                              className: "mt-3 w-full inline-flex justify-center border-b-2 border border-black shadow-sm px-11 py-2 bg-white text-base font-large text-black hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-2 sm:w-auto sm:text-2xl rounded",
                              onClick: (function (param) {
                                  console.log("Send");
                                  
                                })
                            }, "Send"))), React.createElement("div", {
                      className: "m-1 text-center"
                    }, React.createElement(Heading$FlowsUserApp.make, {
                          children: "Token Balances"
                        }), React.createElement("div", {
                          className: "mb-2"
                        }, React.createElement("p", undefined, "TTT: 123")))), React.createElement("div", {
                  className: "mt-2 border-gray-500 border-2 rounded-lg"
                }, React.createElement("div", {
                      className: "m-2 grid grid-cols-"
                    }, React.createElement(Heading$FlowsUserApp.make, {
                          children: "Streams"
                        }), React.createElement("div", {
                          className: "-mt-2"
                        }, React.createElement(StreamsTable$FlowsUserApp.make, {})))), React.createElement("div", {
                  className: "mt-2 border-gray-500 border-2 rounded-lg"
                }, React.createElement("div", {
                      className: "m-2 grid grid-cols-"
                    }, React.createElement(Heading$FlowsUserApp.make, {
                          children: "Payment History"
                        }), React.createElement("div", {
                          className: "-mt-2"
                        }, React.createElement(PaymentHistoryTable$FlowsUserApp.make, {})))), React.createElement("div", {
                  className: "m-4 text-center"
                }, React.createElement("button", {
                      className: "mt-3 w-full inline-flex justify-center border-b-2 border border-black shadow-sm px-4 py-2 bg-white text-base font-large text-black hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-2 sm:w-auto sm:text-2xl rounded",
                      onClick: (function (param) {
                          return backupData(undefined);
                        })
                    }, "Backup")));
}

var make = Dashboard;

export {
  makeBackupRequest_encode ,
  backupData ,
  make ,
  
}
/* react Not a pure module */
